# 🪓 Vue3 巨石组件拆分规则

## 重构目标
将大型Vue单文件组件拆分为四层架构：
- **容器层** (pages/) - 页面拼装
- **展示层** (components/) - UI组件  
- **逻辑层** (composables/) - 状态管理
- **服务层** (services/) - API调用
- **样式层** (styles/) - 样式模块

## 目录结构
```
src/
├── pages/                    # 容器组件
├── components/               # 展示组件
├── composables/              # 逻辑层
├── services/                 # 服务层
├── styles/modules/           # 样式模块
└── views/                    # 原始文件(重构后删除)
```

## 各层职责

### 容器组件 (pages/XXX.vue)
- 只负责UI拼装和事件转发
- 不直接写API调用、业务逻辑
- 通过引入子组件和composable拼装页面

### 展示组件 (components/XXX.vue)  
- 接收props、发出emit
- 不依赖Pinia、不直接调用API
- 保持纯展示 + 事件转发

### 逻辑层 (composables/useXXX.ts)
- 提供数据状态和业务方法
- 管理分页、筛选、排序等交互状态
- 对外暴露最小API

### 服务层 (services/xxx.api.ts)
- 封装所有API调用
- 容器和composable不直接写请求

### 样式模块 (styles/modules/xxx-manager.module.scss)
- 模块内独有样式
- 避免样式冲突

## 重构步骤
1. 分析原文件，识别功能模块
2. 创建服务层，封装API调用
3. 创建逻辑层，管理状态和业务逻辑
4. 创建展示组件，提取UI组件
5. 创建容器组件，拼装页面
6. 创建样式模块，提取样式

## 禁止事项
- 容器组件中直接写API调用
- 展示组件中包含业务逻辑
- 逻辑层中直接操作DOM
- 服务层中包含UI逻辑
- 样式文件中使用全局选择器

## 检查清单
- [ ] 原文件功能完全保留
- [ ] 组件职责单一明确
- [ ] 类型定义完整
- [ ] 错误处理完善
- [ ] 样式模块化
- [ ] 响应式设计
- [ ] 代码可维护性
- [ ] 组件可复用性

## 使用指南
当遇到大型Vue文件时：
1. 按照目录结构创建文件
2. 按照各层职责编写代码
3. 使用重构检查清单验证
4. 删除原始文件
description:
globs:
alwaysApply: true
---
